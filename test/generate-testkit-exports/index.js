import path from 'path';
import fs from 'fs';

import AllComponents from '../../testkit/all-components';
import COMPONENT_DEFINITIONS from '../../testkit/component-definitions';

const shouldCreateExport = name =>
  COMPONENT_DEFINITIONS[name]
    ? ['noTestkit', 'manualExport'].every(
        property => !COMPONENT_DEFINITIONS[name][property],
      )
    : true;

const wrapWithRequire = path => `load('${path}')`; // load() is function included during build time. It comes from test/generate-testkit-exports/load.js
const wrapItemWithFunction = (fn, item) => `${fn}(${item})`;
const pathResolve = (...a) => path.resolve(__dirname, ...a);

const getExportableTestkits = ({ factoryCreator, uniFactoryCreator }) =>
  Object.keys({
    ...AllComponents, // TODO: AllComponents does not yet include all components, because there are nested folders that are treated as top level components
    ...COMPONENT_DEFINITIONS,
  })

    .filter(shouldCreateExport)

    .reduce((testkits, name) => {
      const definition = COMPONENT_DEFINITIONS[name] || {};
      const entryName =
        name[0].toLowerCase() + name.slice(1) + 'TestkitFactory';

      const testkitEntry = wrapItemWithFunction(
        definition.unidriver ? uniFactoryCreator : factoryCreator,
        wrapWithRequire(
          definition.enzymeTestkitPath ||
            ['..', 'src', name, name + '.driver'].join('/'),
        ),
      );

      testkits[entryName] = testkitEntry;

      return testkits;
    }, {});

const warningBanner = templatePath =>
  [
    '/* eslint-disable */',
    '/*',
    ` * DO NOT EDIT THIS FILE.`,
    ' * YOUR CHANGES WILL BE OVERWRITTEN.',
    ` * FILE IS BASED ON test/${path.basename(templatePath)}`,
    ` * AND GENERATED BY test/generate-testkit-exports.js`,
    ' */',
  ].join('\n');

export const generateTestkits = ({
  templatePath,
  outputPath,
  factoryCreator,
  uniFactoryCreator,
}) => {
  const loadUtilPath = pathResolve('load.js');

  const originalSource = fs.readFileSync(templatePath, 'utf8');
  const loadUtilSource = fs.readFileSync(loadUtilPath, 'utf8');

  const testkitImportsSource = Object.entries(
    getExportableTestkits({ factoryCreator, uniFactoryCreator }),
  )
    .map(([name, entry]) => `export const ${name} = ${entry};`)
    .join('\n');

  const source = [
    warningBanner(templatePath),
    originalSource,
    loadUtilSource,
    testkitImportsSource,
  ].join('\n');

  fs.writeFileSync(outputPath, source);
};

// enzyme testkit exports
generateTestkits({
  templatePath: pathResolve('enzyme.template.js'),
  outputPath: pathResolve('..', '..', 'testkit', 'enzyme.js'),
  factoryCreator: 'enzymeTestkitFactoryCreator',
  uniFactoryCreator: 'enzymeUniTestkitFactoryCreator',
});

// vanilla (ReactTestUtils) testkit exports
generateTestkits({
  templatePath: pathResolve('vanilla.template.js'),
  outputPath: pathResolve('..', '..', 'testkit', 'index.js'),
  factoryCreator: 'testkitFactoryCreator',
  uniFactoryCreator: 'uniTestkitFactoryCreator',
});
